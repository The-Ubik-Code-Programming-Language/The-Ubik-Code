<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UbikCode</name>
    </assembly>
    <members>
        <member name="T:Ubik.Compiler.TokenType">
            <summary>
            The token type identifier related to the lexemes extracted by the script
            lexer.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Include">
            <summary>
            Script inclusion keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Global">
            <summary>
            Global variable declaration.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Var">
            <summary>
            Local variable declaration.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.LeftBrace">
            <summary>
            Opening brace.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.RightBrace">
            <summary>
            Closing brace.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.LeftPar">
            <summary>
            Opening parenthesis.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.RightPar">
            <summary>
            Closing parenthesis.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.LeftBracket">
            <summary>
            Opening bracket.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.RightBracket">
            <summary>
            Closing bracket.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Period">
            <summary>
            Membership operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Comma">
            <summary>
            Argument delimeter.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.SemiColon">
            <summary>
            Statement delimeter.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Increment">
            <summary>
            Pre or post increment operator (++).
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Decrement">
            <summary>
            Pre or post decrement operator (--).
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Plus">
            <summary>
            Numeric addition / string concatentation / array operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Minus">
            <summary>
            Numeric substraction / array operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Multiply">
            <summary>
            Multiplication operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Divide">
            <summary>
            Division operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Power">
            <summary>
            Exponent operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Modulo">
            <summary>
            Modulo operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Assign">
            <summary>
            Assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignPlus">
            <summary>
            Additive assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignMinus">
            <summary>
            Subtractive assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignMultiply">
            <summary>
            Multiplicative assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignDivide">
            <summary>
            Divisive assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignPower">
            <summary>
            Exponential assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.AssignModulo">
            <summary>
            Modulo assignment operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.And">
            <summary>
            Boolean conjunction operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Or">
            <summary>
            Boolean disjunction operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Not">
            <summary>
            Boolean negation operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Equal">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.NotEqual">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Greater">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.GreaterOrEqual">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Less">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.LessOrEqual">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Yield">
            <summary>
            Execution control keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Wait">
            <summary>
            Wait semaphore keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Notify">
            <summary>
            Notify semaphore keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Lock">
            <summary>
            Critical section specifier.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.If">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Else">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Switch">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Case">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Default">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Colon">
            <summary>
            Conditional expression keyword
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.While">
            <summary>
            Looping expression keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.For">
            <summary>
            Looping expression keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Foreach">
            <summary>
            Looping expression keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.In">
            <summary>
            Looping expression keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Break">
            <summary>
            Looping control keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Continue">
            <summary>
            Looping control keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Function">
            <summary>
            Function declaration keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Return">
            <summary>
            Function control keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Thread">
            <summary>
            Concurrency control keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Identifier">
            <summary>
            Variable or function identifier.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Null">
            <summary>
            Null reference keyword.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Integer">
            <summary>
            Integer literal.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Float">
            <summary>
            Floating point literal.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.Boolean">
            <summary>
            Boolean literal.
            </summary>
        </member>
        <member name="F:Ubik.Compiler.TokenType.String">
            <summary>
            String literal.
            </summary>
        </member>
        <member name="T:Ubik.Compiler.HostFunctionPrototype">
            <summary>
            Represents an external function defined in the host application
            that is accessible to the scripting engine.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.Type,System.String,System.Collections.Generic.List{System.Type})">
            <summary>
            Constructs a host function prototype with the given name,
            list of parameter <see cref="T:System.Type"/>s and return <see cref="T:System.Type"/>.
            </summary>
            <param name="typeResult">Return <see cref="T:System.Type"/> of the host
            function.</param>
            <param name="strName">Host function name.</param>
            <param name="listParameterTypes">Parameter <see cref="T:System.Type"/>
            list passed to the host function.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.String)">
            <summary>
            Constructs a parameterless host function prototype with
            the given name that may return a variable of any
            <see cref="T:System.Type"/>.
            </summary>
            <param name="strName">Host function name.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.Type,System.String)">
            <summary>
            Constructs a parameterless host function prototype with
            the given name that returns a variable of the given
            <see cref="T:System.Type"/>.
            </summary>
            <param name="typeResult">Return value <see cref="T:System.Type"/>.</param>
            <param name="strName">Host function name.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Constructs a host function prototype with the given name,
            paramater <see cref="T:System.Type"/> and return <see cref="T:System.Type"/>.
            </summary>
            <param name="typeResult">Return value <see cref="T:System.Type"/>.</param>
            <param name="strName">Host function name.</param>
            <param name="typeParameter">Parameter <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.Type,System.String,System.Type,System.Type)">
            <summary>
            Constructs a host function prototype with the given name,
            first and second paramater <see cref="T:System.Type"/>s and return
            <see cref="T:System.Type"/>.
            </summary>
            <param name="typeResult">Return value <see cref="T:System.Type"/>.</param>
            <param name="strName">Host function name.</param>
            <param name="typeParameter0">First parameter <see cref="T:System.Type"/>.</param>
            <param name="typeParameter1">Second parameter <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.#ctor(System.Type,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Constructs a host function prototype with the given name,
            first, second and thirdparamater <see cref="T:System.Type"/>s and return
            <see cref="T:System.Type"/>.
            </summary>
            <param name="typeResult">Return value <see cref="T:System.Type"/>.</param>
            <param name="strName">Host function name.</param>
            <param name="typeParameter0">First parameter <see cref="T:System.Type"/>.</param>
            <param name="typeParameter1">Second parameter <see cref="T:System.Type"/>.</param>
            <param name="typeParameter2">Third parameter <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.VerifyParameters(System.Collections.Generic.List{System.Object})">
            <summary>
            Verifies the given parameter values against the count and
            types of parameters defined in the function prototype. An
            exception is thrown if the parameters fail verification.
            </summary>
            <param name="listParameters">List of parameter values.</param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.VerifyResult(System.Object)">
            <summary>
            Verifies the given result object against the return type
            defined by the prototype. An exception is thrown if the
            return object fails verification.
            </summary>
            <param name="objectResult"></param>
        </member>
        <member name="M:Ubik.Compiler.HostFunctionPrototype.ToString">
            <summary>
            Returns a string representation of the host function
            prototype.
            </summary>
            <returns>A string representation of the host function
            prototype.</returns>
        </member>
        <member name="P:Ubik.Compiler.HostFunctionPrototype.Name">
            <summary>
            Host function name.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.HostFunctionPrototype.ParameterTypes">
            <summary>
            Parameter type list.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.HostFunctionPrototype.Result">
            <summary>
            Function result type.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.HostFunctionPrototype.Handler">
            <summary>
            Host function handler. This property is set only when handlers
            are bound at <see cref="T:Ubik.ScriptManager"/> level.
            </summary>
        </member>
        <member name="T:Ubik.Compiler.LexerException">
            <summary>
            Exception for script lexing errors.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.LexerException.#ctor">
            <summary>
            Constructs an exception.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.LexerException.#ctor(System.String)">
            <summary>
            Constructs an exception with the given message.
            </summary>
            <param name="strMessage">Exception message.</param>
        </member>
        <member name="M:Ubik.Compiler.LexerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the given message
            and inner exception reference.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="exceptionInner">Inner exception reference.</param>
        </member>
        <member name="M:Ubik.Compiler.LexerException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs an exception with the given message, source line,
            character position and text line.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="iSourceLine">Source line number.</param>
            <param name="iSourceCharacter">Source character position.</param>
            <param name="strSourceText">Source text line.</param>
        </member>
        <member name="T:Ubik.Compiler.ParserException">
            <summary>
            Exception for script parsing errors.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.ParserException.#ctor">
            <summary>
            Constructs an exception.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.ParserException.#ctor(System.String)">
            <summary>
            Constructs an exception with the given message.
            </summary>
            <param name="strMessage">Exception message.</param>
        </member>
        <member name="M:Ubik.Compiler.ParserException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the given message
            and inner exception reference.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="exceptionInner">Inner exception reference.</param>
        </member>
        <member name="M:Ubik.Compiler.ParserException.#ctor(System.String,Ubik.Compiler.Token)">
            <summary>
            Constructs an exception with the given message and
            parsing token.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="token">Parsing token related to the
            exception.</param>
        </member>
        <member name="T:Ubik.Compiler.Script">
            <summary>
            Represents the source and compiled form of a script.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.Script.#ctor(Ubik.ScriptManager,System.String)">
            <summary>
            Conscructs a script associated with the given ScriptManager
            and using the given resource name.
            </summary>
            <param name="scriptManager">ScriptManager associated with
            the script.</param>
            <param name="strScriptName">Resource name for loading the
            script.</param>
        </member>
        <member name="M:Ubik.Compiler.Script.HasMainFunction">
            <summary>
            Checks if the script has a 'main' function defined.
            </summary>
            <returns>True if 'main' function defined, false otherwise.
            </returns>
        </member>
        <member name="P:Ubik.Compiler.Script.Manager">
            <summary>
            Script Manager associated with the script.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.Name">
            <summary>
            Script resource name.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.SourceLines">
            <summary>
            Script source code in line-list form.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.Source">
            <summary>
            Script source in continuous string form.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.Executable">
            <summary>
            Compiled executable associated with the script.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.ScriptDictionary">
            <summary>
            Script-level variable dictionary. This dictionary is
            accessible to all <see cref="T:Ubik.Runtime.ScriptContext"/>s created
            for this script.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.Functions">
            <summary>
            Function entry points within the script.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Script.MainFunction">
            <summary>
            Returns the 'main' <see cref="T:Ubik.Compiler.ScriptFunction"/> if defined
            or throws an exception otherwise.
            </summary>
        </member>
        <member name="T:Ubik.Compiler.ScriptFunction">
            <summary>
            Represents a compiled function within a script. The function defines
            the number of parameters accepted by the function and the associated
            entry point into the executable.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.ScriptFunction.#ctor(Ubik.Runtime.ScriptExecutable,System.String,System.Collections.Generic.List{System.String},Ubik.Runtime.ScriptInstruction)">
            <summary>
            Constructs a script function for the given
            <see cref="T:Ubik.Runtime.ScriptExecutable"/>, with the given name, parameter
            count and entry point into the executable.
            </summary>
            <param name="scriptExecutable">Executable form of the
            <see cref="T:Ubik.Compiler.Script"/>.</param>
            <param name="strName">Script function name.</param>
            <param name="listParameters">List of parameter names.</param>
            <param name="scriptInstructionEntryPoint">Entry point
            <see cref="T:Ubik.Runtime.ScriptInstruction"/> in the executable.</param>
        </member>
        <member name="M:Ubik.Compiler.ScriptFunction.ToString">
            <summary>
            Returns a string representation of the function.
            </summary>
            <returns>String representation of the function.</returns>
        </member>
        <member name="P:Ubik.Compiler.ScriptFunction.Executable">
            <summary>
            The <see cref="T:Ubik.Runtime.ScriptExecutable"/> associated with the
            <see cref="T:Ubik.Compiler.Script"/> that contains the function.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.ScriptFunction.Name">
            <summary>
            Name of the function.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.ScriptFunction.ParameterCount">
            <summary>
            Number of parameters accepted by the function.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.ScriptFunction.Parameters">
            <summary>
            List of parameter names.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.ScriptFunction.EntryPoint">
            <summary>
            Entry point into the <see cref="T:Ubik.Runtime.ScriptExecutable"/> in
            <see cref="T:Ubik.Runtime.ScriptInstruction"/> form.
            </summary>
        </member>
        <member name="T:Ubik.Compiler.ScriptLoader">
            <summary>
            Interface for script loading and inclusion. The
            interface is provided to allow implementation of custom script
            loading and inclusion mechanisms beyond the default disk-based
            implementation provided by the library.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.ScriptLoader.LoadScript(System.String)">
            <summary>
            Returns a script in the form of a collection of source lines
            using the given script resource name.
            </summary>
            <param name="strResourceName">Script resource name.</param>
            <returns></returns>
        </member>
        <member name="T:Ubik.Compiler.Token">
            <summary>
            Represents a lexing token generated by the script lexer and used
            by the parser.
            </summary>
        </member>
        <member name="M:Ubik.Compiler.Token.#ctor(Ubik.Compiler.TokenType,System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            Creats a token with the given <see cref="T:Ubik.Compiler.TokenType"/>, lexeme,
            source line and character position and source text for the given
            line.
            </summary>
            <param name="tokenType">The token's <see cref="T:Ubik.Compiler.TokenType"/>.
            </param>
            <param name="objectLexeme">The lexeme associated with the token.
            </param>
            <param name="iSourceLine">The source line number where the token
            occurs.</param>
            <param name="iSourceChar">The source character number where the
            token occurs.</param>
            <param name="strSourceLine">The source text line where the token
            occurs.</param>
        </member>
        <member name="M:Ubik.Compiler.Token.ToString">
            <summary>
            Returns a string representation of the token.
            </summary>
            <returns>String representation of the token.</returns>
        </member>
        <member name="P:Ubik.Compiler.Token.Type">
            <summary>
            The token's <see cref="T:Ubik.Compiler.TokenType"/>.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Token.Lexeme">
            <summary>
            The lexeme associated with the token.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Token.SourceLine">
            <summary>
            The source line number where the token occurs.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Token.SourceCharacter">
            <summary>
            The source character position where the token occurs.
            </summary>
        </member>
        <member name="P:Ubik.Compiler.Token.SourceText">
            <summary>
            The source text line where the token occurs.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.HostModule">
            <summary>
            Represents a complete host funciton implementation module intended
            for bulk registration of host functions, possibly provided by a
            third party.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.HostModule.HostFunctionPrototypes">
            <summary>
            Host function prototypes defined and implemented by the module.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.AssociativeArray">
            <summary>
            Underlying implementation of the script's array type.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.AssociativeArray.Add(System.Object)">
            <summary>
            Adds a simple value using an automatically generated numeric
            index, or appends the context of another array.
            </summary>
            <param name="objectValue">Simple or array value to add.</param>
        </member>
        <member name="M:Ubik.Runtime.AssociativeArray.Subtract(System.Object)">
            <summary>
            Removes the given element value or performs a set
            subtraction if the given parameter is an array.
            </summary>
            <param name="objectValue">Simple or array value to remove.
            </param>
        </member>
        <member name="M:Ubik.Runtime.AssociativeArray.ToString">
            <summary>
            Returns a string representation of the array.
            </summary>
            <returns>String representation of the array.</returns>
        </member>
        <member name="P:Ubik.Runtime.AssociativeArray.Item(System.Object)">
            <summary>
            Returns an array element using the given index object.
            </summary>
            <param name="objectKey">Index object.</param>
            <returns>Array element returned by the indexer.</returns>
        </member>
        <member name="T:Ubik.Runtime.ExecutionException">
            <summary>
            Exception thrown when runtime errors occur.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ExecutionException.#ctor">
            <summary>
            Constructs a parameter-less exception.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ExecutionException.#ctor(System.String)">
            <summary>
            Constructs an exception with the given message.
            </summary>
            <param name="strMessage"></param>
        </member>
        <member name="M:Ubik.Runtime.ExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the given message
            and inner exception reference.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="exceptionInner">Inner exception reference.</param>
        </member>
        <member name="T:Ubik.Runtime.Opcode">
            <summary>
            Represents operator codes used in script instructions.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.DBG">
            <summary>
            Debug information.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.NOP">
            <summary>
            Null (placeholder) operator.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.DCG">
            <summary>
            Declare global variable.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.DCL">
            <summary>
            Declare local variable.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.INT">
            <summary>
            Interrupt execution.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.LOCK">
            <summary>
            Critical section lock.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.ULCK">
            <summary>
            Critical section unlock.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.MOV">
            <summary>
            Move data.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.INC">
            <summary>
            Increment variable.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.DEC">
            <summary>
            Decrement variable.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.NEG">
            <summary>
            Negate variable.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.ADD">
            <summary>
            Addition
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.SUB">
            <summary>
            Subtraction.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.MUL">
            <summary>
            Multiplication.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.DIV">
            <summary>
            Division.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.POW">
            <summary>
            Exponent.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.MOD">
            <summary>
            Modulo.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CNL">
            <summary>
            Compare to NULL.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CEQ">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CNE">
            <summary>
            Not equal.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CG">
            <summary>
            Greater than.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CGE">
            <summary>
            Greater than or equal.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CL">
            <summary>
            Less than.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CLE">
            <summary>
            Less than or equal.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.OR">
            <summary>
            Bolean OR.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.AND">
            <summary>
            Boolean AND
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.NOT">
            <summary>
            Boolean NOT
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.JMP">
            <summary>
            Unconditional jump.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.JT">
            <summary>
            Jump if true.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.JF">
            <summary>
            Jump if false.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CLRA">
            <summary>
            Clear array.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.NEXT">
            <summary>
            Array iterator.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.PUSH">
            <summary>
            Push argument on stack.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.POP">
            <summary>
            Pop argument from stack.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.CALL">
            <summary>
            Call routine.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.RET">
            <summary>
            Return from routine.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.HOST">
            <summary>
            Invoke host function.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.Opcode.THRD">
            <summary>
            Spawn thread.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.Operand">
            <summary>
            Byte code operand representation.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateLiteral(System.Object)">
            <summary>
            Creates a literal operand using the given literal value.
            </summary>
            <param name="objectValue">Literal value.</param>
            <returns>Literal operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateVariable(System.String)">
            <summary>
            Creates a variable operand using the given variable identifier.
            </summary>
            <param name="strIdentifier">Variable identifier.</param>
            <returns>Simple variable operand</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateLiteralIndexedVariable(System.String,System.Object)">
            <summary>
            Creates a variable reference indexed by a literal value.
            </summary>
            <param name="strIdentifier">Identifier for the indexed variable.</param>
            <param name="objectIndex">Literal index.</param>
            <returns>Literal-indexed variable operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateVariableIndexedVariable(System.String,System.String)">
            <summary>
            Creates a variable reference indexed by another variable.
            </summary>
            <param name="strIdentifier">Identifier for the indexed variable.
            </param>
            <param name="strIndexIdentifier">Identifier for the index.</param>
            <returns>Variable-indexed variable operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateInstructionRef(Ubik.Runtime.ScriptInstruction)">
            <summary>
            Creates a <see cref="T:Ubik.Runtime.ScriptInstruction"/> reference.
            </summary>
            <param name="scriptInstruction">Script instruction referred by
            the operand.</param>
            <returns>Script instruction reference operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateScriptFunctionRef(Ubik.Compiler.ScriptFunction)">
            <summary>
            Creates a <see cref="T:Ubik.Compiler.ScriptFunction"/> reference.
            </summary>
            <param name="scriptFunction">Script function referred by
            the operand.</param>
            <returns>Script function reference operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.CreateHostFunctionRef(Ubik.Compiler.HostFunctionPrototype)">
            <summary>
            Creates a <see cref="T:Ubik.Compiler.HostFunctionPrototype"/> reference.
            </summary>
            <param name="hostFunctionPrototype">Host function referred by
            the operand.</param>
            <returns>Host function reference operand.</returns>
        </member>
        <member name="M:Ubik.Runtime.Operand.ToString">
            <summary>
            Returns a string representation of the operand.
            </summary>
            <returns>String representation of the operand.</returns>
        </member>
        <member name="P:Ubik.Runtime.Operand.Type">
            <summary>
            The operand's <see cref="T:Ubik.Runtime.OperandType"/>.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.Value">
            <summary>
            Value interpretation of the operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.IndexLiteral">
            <summary>
            Index literal interpretation of the operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.IndexIdentifier">
            <summary>
            Index variable interpretation of the operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.InstructionRef">
            <summary>
            <see cref="T:Ubik.Runtime.ScriptInstruction"/> interpretation of the operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.ScriptFunctionRef">
            <summary>
            <see cref="T:Ubik.Compiler.ScriptFunction"/> interpretation of the operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.Operand.HostFunctionRef">
            <summary>
            <see cref="T:Ubik.Compiler.HostFunctionPrototype"/> interpretation of the
            operand.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.OperandType">
            <summary>
            Instruction operand type.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.Literal">
            <summary>
            Literal value.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.Variable">
            <summary>
            Simple variable identifier.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.VariableIndexedVariable">
            <summary>
            Variable indexed indirectly via another variable indentifier.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.LiteralIndexedVariable">
            <summary>
            Variable indexed directly via a literal value.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.InstructionRef">
            <summary>
            Reference to a <see cref="T:Ubik.Runtime.ScriptInstruction"/>.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.ScriptFunctionRef">
            <summary>
            Reference to a <see cref="T:Ubik.Compiler.ScriptFunction"/>.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.OperandType.HostFunctionRef">
            <summary>
            Reference to a <see cref="T:Ubik.Compiler.HostFunctionPrototype"/>.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.ScriptContext">
            <summary>
            Represents one of potentially many executable instances of a
            particular script.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.#ctor(Ubik.Compiler.ScriptFunction,System.Collections.Generic.List{System.Object})">
            <summary>
            Constructs a script context with the given <see cref="T:Ubik.Compiler.ScriptFunction"/>
            entry point and function parameters.
            </summary>
            <param name="scriptFunction">Script function to execute.</param>
            <param name="listParameters">Script function parameters.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.#ctor(Ubik.Compiler.ScriptFunction)">
            <summary>
            Constructs a script context with the given <see cref="T:Ubik.Compiler.ScriptFunction"/>
            entry point. No parameters are assumed.
            </summary>
            <param name="scriptFunction">Script function to execute.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.#ctor(Ubik.Compiler.Script,System.Collections.Generic.List{System.Object})">
            <summary>
            Constructs a script context for the given <see cref="P:Ubik.Runtime.ScriptContext.Script"/> assuming
            a main() function with the given parameter values.
            </summary>
            <param name="script">Script to execute.</param>
            <param name="listParameters">Script function parameters.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.#ctor(Ubik.Compiler.Script)">
            <summary>
            Constructs a script context for the given <see cref="P:Ubik.Runtime.ScriptContext.Script"/> assuming
            a main() function with no parameters.
            </summary>
            <param name="script">Script to execute.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.Reset">
            <summary>
            Resets execution of the script context.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.Execute(System.UInt32)">
            <summary>
            Executes up to the given number of instructions and returns
            the actual number of instructions executed.
            </summary>
            <param name="uiMaxInstructions">Maximum instructions to
            execute.</param>
            <returns>Actual number of instructions executed.</returns>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.Execute(System.TimeSpan)">
            <summary>
            Executes the script context for up to the given time
            interval and returns the number of instructions executed.
            </summary>
            <param name="tsInterval">Time interval allowed for
            execution.</param>
            <returns>Actual number of instructions executed.</returns>
        </member>
        <member name="M:Ubik.Runtime.ScriptContext.Execute">
            <summary>
            Executes the script context until the end of the initial
            function specified or an interrupt is generated.
            </summary>
            <returns>Actual number of instructions executed.</returns>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.Script">
            <summary>
            <see cref="P:Ubik.Runtime.ScriptContext.Script"/> associated with this context.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.InterruptOnHostfunctionCall">
            <summary>
            Boolean flag to enable or disable interrupts whenever
            a host function is invoked.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.ChildThreads">
            <summary>
            Child thread contexts generated by the script.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.Interrupted">
            <summary>
            Boolean flag indicating if an interrupt was generated
            after the last execution run. The flag is cleared in
            subsequent executions.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.Terminated">
            <summary>
            Boolean flag indicating if the initially specified
            function has completed execution or otherwise.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.NextInstruction">
            <summary>
            Index to the next instruction to be executed.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.FunctionStack">
            <summary>
            Current execution function stack.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.ParameterStack">
            <summary>
            Current parameter value stack.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.LocalDictionary">
            <summary>
            Variable dictionary defined at local scope.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptContext.Handler">
            <summary>
            Context-level host function handler. This handler
            is ignored by host functions with handlers defined
            at <see cref="T:Ubik.ScriptManager"/> level.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.ScriptExecutable">
            <summary>
            Represents the compiled execuable form of a script.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ScriptExecutable.#ctor(Ubik.Compiler.Script)">
            <summary>
            Constructs an executable form for the given <see cref="P:Ubik.Runtime.ScriptExecutable.Script"/>.
            </summary>
            <param name="script"><see cref="P:Ubik.Runtime.ScriptExecutable.Script"/> associated with the
            executable.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptExecutable.HasMainFunction">
            <summary>
            Checks if the executable has a 'main' function defined.
            </summary>
            <returns>True if 'main' function defined, false otherwise.
            </returns>
        </member>
        <member name="P:Ubik.Runtime.ScriptExecutable.Script">
            <summary>
            <see cref="P:Ubik.Runtime.ScriptExecutable.Script"/> associated with the executable.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptExecutable.Instructions">
            <summary>
            Instruction stream comprising the executable form.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptExecutable.Functions">
            <summary>
            <see cref="T:Ubik.Compiler.ScriptFunction"/> map indexed by function name.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptExecutable.MainFunction">
            <summary>
            Returns the 'main' <see cref="T:Ubik.Compiler.ScriptFunction"/> if defined
            or throws an exception otherwise.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptExecutable.ScriptDictionary">
            <summary>
            The variable dictionary with a script scope.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.HostFunctionHandler">
            <summary>
            Defines an interface for implementing host function calls.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.HostFunctionHandler.OnHostFunctionCall(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            Invoked on a call to a host function.
            </summary>
            <param name="strFunctionName">Name of the invoked host function.</param>
            <param name="listParameters">List of parameters passed to the function.</param>
            <returns>Return value of the host function.</returns>
        </member>
        <member name="T:Ubik.Runtime.ScriptInstruction">
            <summary>
            Represents a single script instruction consisting of an operator code
            and optionally one or more operands.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.ScriptInstruction.#ctor(Ubik.Runtime.Opcode,Ubik.Runtime.Operand,Ubik.Runtime.Operand)">
            <summary>
            Constructs a double-operand instruction with the given opcode and
            two operands.
            </summary>
            <param name="opcode">Instruction opcode.</param>
            <param name="operand0">First instruction operand.</param>
            <param name="operand1">Second instruction operand.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptInstruction.#ctor(Ubik.Runtime.Opcode,Ubik.Runtime.Operand)">
            <summary>
            Constructs a single-operand instruction with the given opcode and
            operand.
            </summary>
            <param name="opcode">Instruction opcode.</param>
            <param name="operand0">Instruction operand.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptInstruction.#ctor(Ubik.Runtime.Opcode)">
            <summary>
            Constructs a zero-operand instruction with the given opcode.
            </summary>
            <param name="opcode">Instruction opcode.</param>
        </member>
        <member name="M:Ubik.Runtime.ScriptInstruction.ToString">
            <summary>
            Returns a string representation of the instruction.
            </summary>
            <returns>A string representation of the instruction.</returns>
        </member>
        <member name="P:Ubik.Runtime.ScriptInstruction.Address">
            <summary>
            Numeric address of the script instruction.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptInstruction.Opcode">
            <summary>
            Instruction opcode.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptInstruction.Operand0">
            <summary>
            Optional first operand.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.ScriptInstruction.Operand1">
            <summary>
            Optional second operand.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.VariableScope">
            <summary>
            Represents the scope of a variable dictionary.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.VariableScope.Global">
            <summary>
            Global scope (per <see cref="T:Ubik.ScriptManager"/> instance).
            </summary>
        </member>
        <member name="F:Ubik.Runtime.VariableScope.Script">
            <summary>
            Script scope shared by all <see cref="T:Ubik.Runtime.ScriptContext"/>s
            assocated with a <see cref="F:Ubik.Runtime.VariableScope.Script"/>.
            </summary>
        </member>
        <member name="F:Ubik.Runtime.VariableScope.Local">
            <summary>
            Local scope associated with a the topmost function frame of a
            <see cref="T:Ubik.Runtime.ScriptContext"/>.
            </summary>
        </member>
        <member name="T:Ubik.Runtime.VariableDictionary">
            <summary>
            Represents a variable scope in dictionary form.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.CreateGlobalDictionary">
            <summary>
            Creates a variable dictionary with a global scope.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.CreateScriptDictionary(Ubik.Runtime.VariableDictionary)">
            <summary>
            Creates a variable dictionary with a script scope
            using the given global variable dictionary reference.
            </summary>
            <param name="variableDicitonaryGlobal">Global variable
            dictionary reference.</param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.CreateLocalDictionary(Ubik.Runtime.VariableDictionary)">
            <summary>
            Creates a variable dictionary with a local scope
            using the given script variable dictionary reference.
            </summary>
            <param name="variableDicitonaryScript"></param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.Clear">
            <summary>
            Clears the dictionary from all the defined variables.
            </summary>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.IsDeclared(System.String)">
            <summary>
            Checks if a variable with the given identifier is
            available in the dictionary or the related wider
            scopes.
            </summary>
            <param name="strIdentifier">True if the variable
            is declared, or false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.Remove(System.String)">
            <summary>
            Removes the variable with the given identifier
            from the dictionary.
            </summary>
            <param name="strIdentifier">Identifier of the
            variable to remove.</param>
        </member>
        <member name="M:Ubik.Runtime.VariableDictionary.GetScope(System.String)">
            <summary>
            Returns the scope of the variable with the
            given identifier.
            </summary>
            <param name="strIdentifier">Variable identifier.</param>
            <returns>Scope of the variable given by the
            identifier.</returns>
        </member>
        <member name="P:Ubik.Runtime.VariableDictionary.Identifiers">
            <summary>
            Collection of identifiers for the variables
            stored in the dictionary.
            </summary>
        </member>
        <member name="P:Ubik.Runtime.VariableDictionary.Item(System.String)">
            <summary>
            Identifier-based variable indexer.
            </summary>
            <param name="strIdentifier">Variable identifier.</param>
            <returns>Variable value.</returns>
        </member>
        <member name="P:Ubik.Runtime.VariableDictionary.Scope">
            <summary>
            <see cref="P:Ubik.Runtime.VariableDictionary.Scope"/> of the variable dictionary.
            </summary>
        </member>
        <member name="T:Ubik.Collections.ReadOnlyDictionary`2">
            <summary>
            Represents a read only wrapper around a generic IDictionary. The design pattern
            mirrors ReadOnlyCollection, and follows the apparent pattern that write operations
            do not throw an exception, but simply make no change to the underlying collection.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Ubik.Collections.ReadOnlyDictionary`2.m_dictionaryTyped">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ubik.Collections.ReadOnlyDictionary`2.m_dictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Ubik.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.AsReadOnly(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Returns a read only dictionary.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Clear">
            <summary>
            Clear does not change a read only Dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.Remove(System.Object)">
            <summary>
            Remove does not affect a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key. Set
            does not affect a ReadOnlyDictionary
            </summary>
            <value></value>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a read only <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the <see typeparamref="TValue"/> with the specified key. Set
            does not change a read only Dictionary
            </summary>
            <value></value>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Ubik.Collections.ReadOnlyICollection`1">
            <summary>
            Wraps an existing ICollection as read only, following the pattern of 
            ReadOnlyCollection to simply no-op modifying functions intead of throwing
            Exceptions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.AsReadOnly(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returned a read only wrapper around the collectionToWrap.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Ubik.Collections.ReadOnlyICollection`1"/> class.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.Add(`0)">
            <summary>
            Add does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.Clear">
            <summary>
            Clear does not change a ReadOnlyICollection
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.Remove(`0)">
            <summary>
            Remove does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:Ubik.Collections.ReadOnlyICollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Ubik.Collections.ReadOnlyICollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="T:Ubik.UbikException">
            <summary>
            Generic script engine exception.
            </summary>
        </member>
        <member name="M:Ubik.UbikException.#ctor">
            <summary>
            Constructs an exception
            </summary>
        </member>
        <member name="M:Ubik.UbikException.#ctor(System.String)">
            <summary>
            Constructs an exception with the given message.
            </summary>
            <param name="strMessage">Exception message.</param>
        </member>
        <member name="M:Ubik.UbikException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an exception with the given message
            and inner exception reference.
            </summary>
            <param name="strMessage">Exception message.</param>
            <param name="exceptionInner">Inner exception reference.</param>
        </member>
        <member name="M:Ubik.UbikException.ToString">
            <summary>
            Returns a string representation of the exception.
            </summary>
            <returns>A string representation of the exception.</returns>
        </member>
        <member name="P:Ubik.UbikException.Message">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="P:Ubik.UbikException.MessageTrace">
            <summary>
            Complete message trace recursively including any
            inner exceptions.
            </summary>
        </member>
        <member name="T:Ubik.ScriptManager">
            <summary>
            Represents a global script domain where scripts can be
            loaded and executed.
            </summary>
        </member>
        <member name="M:Ubik.ScriptManager.#ctor">
            <summary>
            Constructsa script manager.
            </summary>
        </member>
        <member name="M:Ubik.ScriptManager.IsHostFunctionRegistered(System.String)">
            <summary>
            Checks if a host function prototype is registered with the given
            name.
            </summary>
            <param name="strName">Name of the host function.</param>
            <returns>True if host function registered, or false otherwise.
            </returns>
        </member>
        <member name="M:Ubik.ScriptManager.RegisterHostModule(Ubik.Runtime.HostModule)">
            <summary>
            Registers the given <see cref="T:Ubik.Runtime.HostModule"/> with the script
            manager.
            </summary>
            <param name="hostModule">Host module to register.</param>
        </member>
        <member name="M:Ubik.ScriptManager.RegisterHostFunction(Ubik.Compiler.HostFunctionPrototype,Ubik.Runtime.HostFunctionHandler)">
            <summary>
            Registers the given <see cref="T:Ubik.Compiler.HostFunctionPrototype"/> with an
            accompanying <see cref="T:Ubik.Runtime.HostFunctionHandler"/>. Handlers
            defined at <see cref="T:Ubik.Runtime.ScriptContext"/> level for this function
            are ignored.
            </summary>
            <param name="hostFunctionPrototype">Host function prototype to
            register.</param>
            <param name="hostFunctionHandler">Handler associated with the
            host function.</param>
        </member>
        <member name="M:Ubik.ScriptManager.RegisterHostFunction(Ubik.Compiler.HostFunctionPrototype)">
            <summary>
            Registers the given <see cref="T:Ubik.Compiler.HostFunctionPrototype"/> without
            a handler. If a <see cref="T:Ubik.Compiler.Script"/> uses the given host
            function, the handler must be bound at
            <see cref="T:Ubik.Runtime.ScriptContext"/> level.
            </summary>
            <param name="hostFunctionPrototype">Host function prototype to
            register.</param>
        </member>
        <member name="M:Ubik.ScriptManager.ClearActiveLocks">
            <summary>
            Clears all the currently active locks.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.Loader">
            <summary>
            The <see cref="T:Ubik.Compiler.ScriptLoader"/> associated with the script manager.
            The loader defines the loading and 'include' mechanism used by
            the scripts. The default loader implementation is disk-based.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.GlobalDictionary">
            <summary>
            The variable dictionary at global level.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.HostFunctions">
            <summary>
            Registered <see cref="T:Ubik.Compiler.HostFunctionPrototype"/>s indexed by name.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.DebugMode">
            <summary>
            Controls generation of debug instructions for traceability
            purposes.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.OptimiseCode">
            <summary>
            Enables or disables peephole optimisation of the generated
            byte code.
            </summary>
        </member>
        <member name="P:Ubik.ScriptManager.ActiveLocks">
            <summary>
            The currently active locks mapped to the
            owning <see cref="T:Ubik.Runtime.ScriptContext"/>s.
            </summary>
        </member>
    </members>
</doc>
